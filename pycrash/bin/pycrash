#!/usr/bin/python
import pty
import subprocess
from time import sleep
import sys

import os
import tty
from select import select
import multiprocessing

import termios
import fcntl
import os
import sys

import signal

CRASH_PATCH = os.path.expanduser('~') + '/.crash/bin/'

'''
===========================================
    read elf info from elf files
===========================================
ELF Header:
  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00
  Class:                             ELF64
  Data:                              2's complement, little endian
  Version:                           1 (current)
  OS/ABI:                            UNIX - System V
  ABI Version:                       0
  Type:                              EXEC (Executable file)
  Machine:                           Advanced Micro Devices X86-64
  Version:                           0x1
  Entry point address:               0x1000000
  Start of program headers:          64 (bytes into file)
  Start of section headers:          182200136 (bytes into file)
  Flags:                             0x0
  Size of this header:               64 (bytes)
  Size of program headers:           56 (bytes)
  Number of program headers:         5
  Size of section headers:           64 (bytes)
  Number of section headers:         44
  Section header string table index: 43
'''


def read_elf_info(elf_file):
    elf_class = '';
    elf_type = '';
    elf_machine = '';
    elf_entry_point = ''
    elf_info = {}
    elf_info['ret'] = 'Error'

    if not os.path.isfile(elf_file):
        print "read_elf_info: %s not a file" % os.path.basename(elf_file)
    else:
        if not os.path.isabs(elf_file):
            elf_file = os.getcwd() + '/' + elf_file

        try:
            ret = subprocess.check_output(["readelf", "-h", elf_file])
            elf_info['ret'] = 'Sucess'
            ret = ret.splitlines()
            for m in ret:
                tmp = m.split(':')
                tmp[0] = tmp[0].lstrip()
                tmp[0] = tmp[0].rstrip()
                tmp[1] = tmp[1].lstrip()
                tmp[1] = tmp[1].rstrip()
                elf_info[tmp[0]] = tmp[1].lstrip()
        except:
            print "read_elf_info: %s not a elf file" % os.path.basename(elf_file)

    return elf_info


'''
===========================================
    make command
===========================================
'''


def make_cmd():
    crash_tool = 'crash'
    crash_args = sys.argv[1:]

    vmlinux = ''; vmlinux_elf_info = {}
    core_dump = ''; core_dump_elf_info = {}
    mobilevisor = ''; mobilevisor_elf_info = {}
    rawdata_dump = ''

    for a in crash_args:
        if not os.path.isfile(a):
            continue

        elf_info = read_elf_info(a)

        if elf_info['ret'] == "Error":
            rawdata_dump = a
        elif os.path.basename(a) == 'vmlinux' \
            and elf_info['Type'] == "EXEC (Executable file)":
            vmlinux = a
            vmlinux_elf_info = elf_info
        elif os.path.basename(a) == 'mobilevisor.elf' \
            and elf_info['Type'] == "EXEC (Executable file)":
            mobilevisor = a
            mobilevisor_elf_info = elf_info
        elif elf_info['Type'] == "CORE (Core file)":
            core_dump = a
            core_dump_elf_info = elf_info

    if mobilevisor != '' and rawdata_dump != '':
        phys_start = '0x0'
        phys_start = hex(int(mobilevisor_elf_info['Entry point address'], 16) - 0x140000)
        crash_tool = 'crash_vmm'
        crash_args += ['--mv']
        crash_args += ['--mv_phys_start'] + [phys_start]
        crash_args.remove(rawdata_dump)
        crash_args += [rawdata_dump + '@' + phys_start]

    elif vmlinux != '' and core_dump != '':
        # force load extensions
        crash_args += ['-x']
        if vmlinux_elf_info['Machine'] == "AArch64":
            crash_tool = 'crash_arm64'
            crash_args += ['-m phys_offset=0x80000000']

        elif vmlinux_elf_info['Machine'] == "ARM":
            crash_tool = 'crash_arm'
            crash_args += ['-m phys_base=0x80000000']

        elif vmlinux_elf_info['Machine'] == "Advanced Micro Devices X86-64":
            crash_tool = 'crash_x86_64'
            crash_args += ["-m phys_base=0x34200000"]

        else:
            print "unknown machine"

    elif vmlinux != '' and rawdata_dump != '':
        # force load extensions
        crash_args += ['-x']

        if vmlinux_elf_info['Machine'] == "AArch64":
            crash_tool = 'crash_arm64'
            crash_args += ['-m phys_offset=0x80000000']
            crash_args.remove(rawdata_dump)
            crash_args += [rawdata_dump + '@' + '0x80000000']

        elif vmlinux_elf_info['Machine'] == "ARM":
            crash_tool = 'crash_arm'
            crash_args += ['-m phys_base=0x80000000']
            crash_args.remove(rawdata_dump)
            crash_args += [rawdata_dump + '@' + '0x80000000']

        elif vmlinux_elf_info['Machine'] == "Advanced Micro Devices X86-64":
            crash_tool = 'crash_x86_64'
            crash_args += ["-m phys_base=0x34200000"]
            crash_args.remove(rawdata_dump)
            crash_args += [rawdata_dump + '@' + '0x34200000']

        else:
            print "unknown machine"

    crash_extensions = os.environ['HOME']+'/.crash/extensions/'
    if crash_tool == 'crash_x86_64':
        crash_extensions += 'x86_64'
    elif crash_tool == 'crash_arm':
        crash_extensions += 'arm'
    else:
        #defalt set to arm64
        crash_extensions += 'arm64'
    os.environ['CRASH_EXTENSIONS'] = crash_extensions

    print "'CRASH_EXTENSIONS':"
    print os.environ['CRASH_EXTENSIONS']

    cmd_line = [crash_tool] + crash_args

    print '==================== cmdline ========================'
    for m in cmd_line:
        print m,
    print '\n====================================================='

    return cmd_line

'''
===========================================
    help message output
===========================================
'''


def help_msg():
    print '''
NAME
    pycrash - wrapper of crash tools    
SYNOPSIS
    pycrash [option] [symbol] [memdump]

DESCRIPTION
    This command is a wrapper of crash tools, which will auto detect arch base on
    input symbol files, and fill must parameters for each arch. and will do some
    sanity check automatically.

    ---help     display this help message.
    -h|--help   display help message for crash tools
    other options will pass to crash tool directly.

Example:
    pycrash   vmlinux             sysdump
    pycrash   mobilevisor.elf     sysdump.core.01_0x00000000-0x007fffff_dump.lst
    pycrash   mobilevisor.elf     sysdump.core.12_0x48000000-0x487fffff_dump.lst

'''


subprocess_handler = 0;

'''
===========================================
    signal handler function
===========================================
'''


def sig_handler(signum, frame):
    print "sig_handler: sigal %d received" % signum
    subprocess_handler.kill()


'''
===========================================
    main function
===========================================
'''
if __name__ == "__main__":

    if len(sys.argv) == 1 or sys.argv[1] == "---help":
        help_msg()
    else:
        cmdline = make_cmd()
        signal.signal(signal.SIGINT, sig_handler)
        signal.signal(signal.SIGTERM, sig_handler)

        stdout_bak = sys.stdout
        stderr_bak = sys.stderr

        p = subprocess.Popen(cmdline, stdin=sys.stdin, stdout=sys.stdout, stderr=sys.stderr)
        subprocess_handler = p
        f = open('.main.log', 'w')
        sys.stdout = f
        sys.stderr = f
        print "waiting subprocess exit"
        p.wait()
        sys.stdout = stdout_bak
        sys.stderr = stderr_bak
        os.remove('.main.log')
